{"version":3,"sources":["Drug.js","DrugList.js","DataFetcher.js","App.js","reportWebVitals.js","index.js"],"names":["Drug","drug","class","drugName","drugDesc","DrugList","drugs","map","uuid","LINK","fetchData","a","myData","axios","get","resp","data","console","error","log","dName","push","App","useState","pageNum","setPageNum","drugArray","setDrugArray","drugsFromAPI","setDrugsFromAPI","useEffect","then","catch","err","sliceLower","sliceUpper","slice","length","Button","variant","onClick","incrementPageNum","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAEe,SAASA,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAC3B,OACI,sBAAKC,MAAM,OAAX,UACI,oBAAIA,MAAM,YAAV,SAAuBD,EAAKE,WAC5B,mBAAGD,MAAM,WAAT,SAAqBD,EAAKG,c,kBCAvB,SAASC,EAAT,GAA8B,IAAVC,EAAS,EAATA,MAE/B,OACI,qBAAKJ,MAAM,WAAX,SACKI,EAAMC,KAAI,SAAAN,GAAI,OACX,cAACD,EAAD,CAAMC,KAAMA,GAAWO,qB,6CCTnCC,EAAO,0FAEI,SAAeC,IAA9B,+B,4CAAe,kCAAAC,EAAA,6DAEPC,EAAS,KAFF,kBAIUC,IAAMC,IAAIL,GAJpB,OAIHM,EAJG,OAKPH,EAASG,EAAKC,KALP,gDAOPC,QAAQC,MAAR,MACAD,QAAQE,IAAI,6BARL,QAaX,IAASC,KAFLd,EAAQ,GAEMM,EACdN,EAAMe,KAAK,CAAElB,SAAUiB,EAAOhB,SAAUQ,EAAOQ,KAdxC,yBAiBJd,GAjBI,0D,kCCsFAgB,MApFf,WAAgB,IAAD,EACiBC,mBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAG2BJ,mBAAS,IAHpC,mBAGNK,EAHM,KAGQC,EAHR,KA2Cb,OAlBAC,qBAAU,WACRpB,IAAYqB,MAAK,SAAAf,GACfa,EAAgBb,GAChBS,EAAW,MACVO,OAAM,SAAAC,GACPhB,QAAQC,MAAMe,QAEf,IAEHH,qBAAU,WACR,GAAgB,IAAZN,EAAe,CACjB,IAAIU,EAAa,GAAKV,EAAU,GAC5BW,EAAa,EAAIX,EACrBG,EAAaC,EAAaQ,MAAMF,EAAYC,OAG7C,CAACX,IAGF,sBAAKtB,MAAM,UAAX,UACE,kDACA,gTAKCwB,EAAUW,OAAS,GAAK,cAAChC,EAAD,CAAUC,MAAOoB,IAC1C,cAACY,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,YA/CvC,WACE,OAAQhB,GACN,KAAK,EACHd,IAAYqB,MAAK,SAAAf,GACfa,EAAgBb,MACfgB,OAAM,SAAAC,GACPhB,QAAQC,MAAMe,MAEhBR,EAAWD,EAAU,GACrB,MACF,KAAK,EAEHC,EAAW,GACX,MACF,QACEA,EAAWD,EAAU,IAgCoBiB,IAA3C,uBACA,sBAAKvC,MAAM,aAAX,UACE,8CACA,0aAOA,2aAKqB,mBAAGwC,KAAK,6DAAR,oBALrB,OAOA,6CACA,4JAIA,qGAEA,kGCtEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.db1a61e1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Drug({ drug }) {\r\n    return (\r\n        <div class=\"Drug\">\r\n            <h3 class=\"DrugTitle\">{drug.drugName}</h3>\r\n            <p class=\"DrugDesc\">{drug.drugDesc}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Drug from './Drug.js';\r\nimport './App.css';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n\r\nexport default function DrugList({ drugs }) {\r\n    \r\n    return (\r\n        <div class=\"DrugList\">\r\n            {drugs.map(drug=>(\r\n                <Drug drug={drug} key={uuid()} />\r\n            ))}\r\n        </div>\r\n    )\r\n\r\n}\r\n","import axios from 'axios';\r\n\r\nlet LINK = 'https://cors-anywhere.herokuapp.com/mhouol6jn7.execute-api.us-east-1.amazonaws.com/prod';\r\n\r\nexport default async function fetchData() {\r\n    // let apiData = getDataFromAPI();\r\n    let myData = null;\r\n    try {\r\n        let resp = await axios.get(LINK);\r\n        myData = resp.data;\r\n    } catch (err) {\r\n        console.error(err);\r\n        console.log('Could not fetch from API.');\r\n    }\r\n\r\n    let drugs = [];\r\n\r\n    for (let dName in myData) {\r\n        drugs.push({ drugName: dName, drugDesc: myData[dName] });\r\n    }\r\n\r\n    return drugs;\r\n}\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport DrugList from './DrugList.js';\r\nimport fetchData from './DataFetcher';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n\r\nfunction App() {\r\n  const [pageNum, setPageNum] = useState(0); // the page number\r\n  const [drugArray, setDrugArray] = useState([]); // the current drug array being showed\r\n  const [drugsFromAPI, setDrugsFromAPI] = useState([]); // latest drugs from api\r\n\r\n  function incrementPageNum() {\r\n    switch (pageNum) {\r\n      case 2:\r\n        fetchData().then(data => {\r\n          setDrugsFromAPI(data)\r\n        }).catch(err => {\r\n          console.error(err);\r\n        });\r\n        setPageNum(pageNum + 1); // this should happen before api call finishes\r\n        break;\r\n      case 3:\r\n        // if it's 3, data should have been preloaded in page 2.\r\n        setPageNum(1);\r\n        break;\r\n      default:\r\n        setPageNum(pageNum + 1);\r\n    }\r\n  }\r\n\r\n  // works when page first works\r\n  useEffect(() => {\r\n    fetchData().then(data => {\r\n      setDrugsFromAPI(data);\r\n      setPageNum(1);\r\n    }).catch(err => {\r\n      console.error(err);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (pageNum !== 0) {\r\n      let sliceLower = 6 * (pageNum - 1);\r\n      let sliceUpper = 6 * pageNum;\r\n      setDrugArray(drugsFromAPI.slice(sliceLower, sliceUpper));\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [pageNum]); // doesn't need drugsFromAPI as dependency because if pageNum is 0, nothing happens\r\n\r\n  return (\r\n    <div class='mainDiv'>\r\n      <h1>Crazy Pharmacist</h1>\r\n      <p>\r\n        Have you ever wondered where the names of perscription drugs come from? It seems like they\r\n        are pulled straight out of someones... head. This is a generator that creates the names of\r\n        fictional pharmaceuticals and their uses. Any resemblance to a real drug is coincidental.\r\n      </p>\r\n      {drugArray.length > 0 && <DrugList drugs={drugArray} />}\r\n      <Button variant=\"primary\" onClick={() => { incrementPageNum() }}>Show More</Button>\r\n      <div class=\"HowItWorks\">\r\n        <h2>How it works</h2>\r\n        <p>\r\n          This type of generator is known as a Markov Model. There are two of them in this project:\r\n          one for the names and one for the descriptions. For each 'state' (letter or word in a name\r\n          or description) that the model encounters when training, it record the state, along with\r\n          the transition to the next state. When done, it stores all states, all transitions and the\r\n          probabilities of observing them.\r\n      </p>\r\n        <p>\r\n          When generating, the model transitions to the next state by picking the next state randomly,\r\n          using the probabilities that were collected when training. This is done until encountering\r\n          a termination state ('.'). Generated sequences are rejected if they are too long, too short\r\n          or don't sound right. Generator source code (in Python and JavaScript!) along with the extracted\r\n        data is available on <a href='https://github.com/alexkalinins/crazy-pharmacist-generator'>GitHub</a>.\r\n      </p>\r\n        <h2>Data Source</h2>\r\n        <p>\r\n          Drug brand names were collected from the National Drug Code (NDC) database. Use descriptions\r\n          were collected from Wikipedia.\r\n      </p>\r\n        <p>If you use this program to name a perscription drug, let me know :) </p>\r\n\r\n        <footer>\r\n          Copyright 2020 by Alex Kalinins. All Rights Reserved.\r\n      </footer>\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}